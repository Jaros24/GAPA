#include "AtTPC20MgDecay.h"

#include <FairLogger.h> // for Logger, LOG
#include <FairPrimaryGenerator.h>

#include <TF1.h>
#include <TH1.h>
#include <TMath.h>
#include <TRandom.h>

#include <cmath>    // for acos
#include <iostream> // for operator<<, endl, basic_ostream, cout
#include <memory>   // for make_unique, unique_ptr

Bool_t AtTPC20MgDecay::Init()
{
   // Initialize generatorTH1F*h1 = new TH1F("h1", "h1", 1000,0,11236.8);
   return true;
}

// -----   Public method ReadEvent   --------------------------------------
Bool_t AtTPC20MgDecay::ReadEvent(FairPrimaryGenerator *primGen)
{
   srand((unsigned)time(NULL));
   UInt_t seed=(float)rand() / RAND_MAX * 1000000;
   gRandom->SetSeed(seed); // Seed
   if (fBoxVtxIsSet) {
      fX = gRandom->Uniform(fX1, fX2);
      fY = gRandom->Uniform(fY1, fY2);
      fZ = gRandom->Uniform(fZ1, fZ2);
   }

   // Proton of 1210keV and alpha of 506keV
   Int_t protonPDGID = 2212;
   Int_t alphaPDGID = 1000020040;
   Int_t gammaPDGID = 22;
   Int_t betaPDGID = 11;
   Double32_t ptProton = 0, pxProton = 0, pyProton = 0, pzProton = 0;
   Double32_t pabsProton = 0.0388; // P0 E0
   //Double32_t pabsProton = 0.2170; // GeV/c
   Double32_t brp=0;
   Double32_t thetaProton = acos(gRandom->Uniform(-1, 1));
   Double32_t phiProton = gRandom->Uniform(0, 360) * TMath::DegToRad();
   pzProton = pabsProton * TMath::Cos(thetaProton);
   ptProton = pabsProton * TMath::Sin(thetaProton);
   pxProton = ptProton * TMath::Cos(phiProton);
   pyProton = ptProton * TMath::Sin(phiProton);

   
   if (fNuclearDecayChainIsSet){

	if(!protonPDGID == 2212)
		LOG(fatal)<<"AtTPC20MgDecayGenerator:PDG code"<<protonPDGID<<"is not a proton!";
//if(protonPDGID == 2212)
			brp=gRandom->Uniform(0,1);

for (Int_t i =0; i<fParticlesDefinedInNuclearDecay; i++){


if(brp<=1){
			Double32_t ProtonMomentum = TMath::Sqrt(pxProton*pxProton+pyProton*pyProton+pzProton*pzProton);
			pxProton=pxProton*fParticleEnergies[i]/ProtonMomentum;
			pyProton=pyProton*fParticleEnergies[i]/ProtonMomentum;
			pzProton=pzProton*fParticleEnergies[i]/ProtonMomentum;}

}



   primGen->AddTrack(22, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); // dummy photon for track ID 0
   if(brp<=1){
   primGen->AddTrack(protonPDGID, pxProton, pyProton, pzProton, fX, fY, fZ);}
   
 
}
   return kTRUE;
}
void AtTPC20MgDecay::SetDecayChainPoint(Double32_t ParticleEnergy, Double32_t ParticleBranchingRatio)
{

	for(Int_t i =0; i<fParticlesDefinedInNuclearDecay;i++){
		fParticleEnergies[i]=ParticleEnergy;
		fParticleBranchingRatios[i]=ParticleBranchingRatio;
		
	
}
}

ClassImp(AtTPC20MgDecay)
