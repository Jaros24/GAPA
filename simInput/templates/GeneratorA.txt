#include "AtTPC20MgDecay.h"

#include <FairLogger.h> // for Logger, LOG
#include <FairPrimaryGenerator.h>

#include <TF1.h>
#include <TH1.h>
#include <TMath.h>
#include <TRandom.h>

#include <cmath>    // for acos
#include <iostream> // for operator<<, endl, basic_ostream, cout
#include <memory>   // for make_unique, unique_ptr

Bool_t AtTPC20MgDecay::Init()
{
   // Initialize generatorTH1F*h1 = new TH1F("h1", "h1", 1000,0,11236.8);
   return true;
}

// -----   Public method ReadEvent   --------------------------------------
Bool_t AtTPC20MgDecay::ReadEvent(FairPrimaryGenerator *primGen)
{

   if (fBoxVtxIsSet) {
      fX = gRandom->Uniform(fX1, fX2);
      fY = gRandom->Uniform(fY1, fY2);
      fZ = gRandom->Uniform(fZ1, fZ2);
   }

   // Proton of 1210keV and alpha of 506keV
   Int_t protonPDGID = 2212;
   Int_t alphaPDGID = 1000020040;
   Int_t gammaPDGID = 22;
   Int_t betaPDGID = 11;
   Double32_t ptAlpha = 0, pxAlpha = 0, pyAlpha = 0, pzAlpha = 0;
   Double32_t pabsAlpha = 0.0388; // P0 E0
   //Double32_t pabsAlpha = 0.2170; // GeV/c
   Double32_t brp=0;
   Double32_t thetaAlpha = acos(gRandom->Uniform(-1, 1));
   Double32_t phiAlpha = gRandom->Uniform(0, 360) * TMath::DegToRad();
   pzAlpha = pabsAlpha * TMath::Cos(thetaAlpha);
   ptAlpha = pabsAlpha * TMath::Sin(thetaAlpha);
   pxAlpha = ptAlpha * TMath::Cos(phiAlpha);
   pyAlpha = ptAlpha * TMath::Sin(phiAlpha);

   if (fNuclearDecayChainIsSet){
      // Generate a random number between 0 and 1
      Double32_t bra = 1;

      for (Int_t i = 0; i < fParticlesDefinedInNuclearDecay; i++) {
         if (bra <= fParticleBranchingRatios[i]) {
            Double32_t AlphaMomentum = TMath::Sqrt(pxAlpha*pxAlpha+pyAlpha*pyAlpha+pzAlpha*pzAlpha);
            pxAlpha = pxAlpha*fParticleEnergies[i]/AlphaMomentum;
            pyAlpha = pyAlpha*fParticleEnergies[i]/AlphaMomentum;
            pzAlpha = pzAlpha*fParticleEnergies[i]/AlphaMomentum;
            break;
         }
         bra -= fParticleBranchingRatios[i];
      }

      // If the random number is less than or equal to the sum of the branching ratios for alpha particles,
      // generate an alpha particle.
      bra=1;
      if (bra<=1) {
         primGen->AddTrack(alphaPDGID, pxAlpha, pyAlpha, pzAlpha, fX, fY, fZ);
      }
   }

   return kTRUE;
}

void AtTPC20MgDecay::SetDecayChainPoint(Double32_t ParticleEnergy, Double32_t ParticleBranchingRatio)
{

	for(Int_t i =0; i<fParticlesDefinedInNuclearDecay;i++){
		fParticleEnergies[i]=ParticleEnergy;
		fParticleBranchingRatios[i]=ParticleBranchingRatio;
		
	
}
}

ClassImp(AtTPC20MgDecay)
